#!/usr/bin/env node

import readline from 'readline/promises';
import { stdin as input, stdout as output } from 'process';
import https from 'https';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

/**
 * Simple script to get Atlassian MCP tools with auth
 */

async function getToken() {
  if (process.env.ATLASSIAN_ACCESS_TOKEN) {
    return process.env.ATLASSIAN_ACCESS_TOKEN;
  }

  if (process.env.ATLASSIAN_API_TOKEN) {
    return process.env.ATLASSIAN_API_TOKEN;
  }

  console.log('\nüìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API —Ç–æ–∫–µ–Ω–∞ Atlassian:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://id.atlassian.com/manage-profile/security/api-tokens');
  console.log('2. –ù–∞–∂–º–∏—Ç–µ "Create API token"');
  console.log('3. –î–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—É –∏–º—è –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ');
  console.log('\n–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('SET ATLASSIAN_ACCESS_TOKEN=your_token_here (Windows)');
  console.log('export ATLASSIAN_ACCESS_TOKEN=your_token_here (Linux/Mac)\n');

  const rl = readline.createInterface({ input, output });
  const token = await rl.question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Atlassian API token: ');
  rl.close();

  return token.trim();
}

async function fetchWithSSE(token) {
  console.log('\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlassian MCP —Å–µ—Ä–≤–µ—Ä—É...');

  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'mcp.atlassian.com',
      path: '/v1/sse',
      headers: {
        'Accept': 'text/event-stream',
        'Authorization': `Bearer ${token}`,
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'User-Agent': 'MCP-Client/1.0'
      }
    };

    const req = https.get(options, (res) => {
      console.log('–°—Ç–∞—Ç—É—Å:', res.statusCode);

      if (res.statusCode === 401) {
        reject(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.'));
        return;
      }

      if (res.statusCode !== 200) {
        reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
        return;
      }

      console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');

      let buffer = '';
      const tools = [];
      let serverInfo = null;
      let messageCount = 0;

      // Timeout –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      let dataTimeout = setTimeout(() => {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messageCount);
        console.log('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', tools.length);
        res.destroy();
        resolve({ tools, serverInfo });
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è

      res.on('data', (chunk) => {
        buffer += chunk.toString();
        const lines = buffer.split('\n');

        for (let i = 0; i < lines.length - 1; i++) {
          const line = lines[i].trim();

          if (line.startsWith('event:')) {
            const eventType = line.substring(6).trim();
            console.log('Event type:', eventType);
          }

          if (line.startsWith('data:')) {
            messageCount++;
            const data = line.substring(5).trim();

            if (data === '[DONE]') {
              console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
              clearTimeout(dataTimeout);
              res.destroy();
              resolve({ tools, serverInfo });
              return;
            }

            try {
              const json = JSON.parse(data);

              // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
              if (json.result?.tools) {
                tools.push(...json.result.tools);
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${json.result.tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
              } else if (json.tools) {
                tools.push(...json.tools);
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${json.tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
              } else if (json.params?.tools) {
                tools.push(...json.params.tools);
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${json.params.tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
              } else if (json.serverInfo) {
                serverInfo = json.serverInfo;
                console.log('Server info:', serverInfo);
              } else if (json.method) {
                console.log('Method:', json.method);
              }

              // –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
              if (json.name && json.inputSchema) {
                tools.push(json);
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${json.name}`);
              }
            } catch (e) {
              // –ù–µ JSON –¥–∞–Ω–Ω—ã–µ
              if (data.length < 100) {
                console.log('Non-JSON data:', data);
              }
            }

            // –°–±—Ä–æ—Å —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            clearTimeout(dataTimeout);
            dataTimeout = setTimeout(() => {
              console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', tools.length);
              res.destroy();
              resolve({ tools, serverInfo });
            }, 5000);
          }
        }

        buffer = lines[lines.length - 1];
      });

      res.on('end', () => {
        clearTimeout(dataTimeout);
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        resolve({ tools, serverInfo });
      });

      res.on('error', (err) => {
        clearTimeout(dataTimeout);
        reject(err);
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function saveResults(tools, serverInfo) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const jsonFile = path.join(__dirname, `atlassian-tools-${timestamp}.json`);

  const data = {
    timestamp: new Date().toISOString(),
    serverUrl: 'https://mcp.atlassian.com/v1/sse',
    serverInfo,
    toolCount: tools.length,
    tools
  };

  await fs.writeFile(jsonFile, JSON.stringify(data, null, 2), 'utf8');
  console.log(`\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${jsonFile}`);

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏
  if (tools.length > 0) {
    const summaryFile = path.join(__dirname, `atlassian-tools-summary-${timestamp}.txt`);
    let summary = `Atlassian MCP Tools
–î–∞—Ç–∞: ${new Date().toISOString()}
–í—Å–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${tools.length}

–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
`;

    tools.forEach((tool, i) => {
      summary += `${i + 1}. ${tool.name}\n`;
      if (tool.description) {
        summary += `   ${tool.description}\n`;
      }
    });

    await fs.writeFile(summaryFile, summary, 'utf8');
    console.log(`üìÑ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${summaryFile}`);
  }

  return jsonFile;
}

async function main() {
  console.log('='.repeat(60));
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Atlassian MCP');
  console.log('='.repeat(60));

  try {
    const token = await getToken();

    if (!token) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      process.exit(1);
    }

    const { tools, serverInfo } = await fetchWithSSE(token);

    if (tools.length > 0) {
      await saveResults(tools, serverInfo);

      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      console.log(`‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${tools.length}`);

      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      const categories = {};
      tools.forEach(tool => {
        const prefix = tool.name.split('_')[0] || tool.name.split('-')[0] || 'other';
        categories[prefix] = (categories[prefix] || 0) + 1;
      });

      console.log('\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:');
      Object.entries(categories).forEach(([cat, count]) => {
        console.log(`‚Ä¢ ${cat}: ${count}`);
      });

      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:');
      tools.slice(0, 5).forEach(tool => {
        console.log(`‚Ä¢ ${tool.name}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Atlassian');
      console.log('2. –¢–æ–∫–µ–Ω –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      console.log('3. MCP —Å–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
      if (serverInfo) {
        console.log('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:', serverInfo);
      }
    }
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message);

    if (error.message.includes('401')) {
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ API —Ç–æ–∫–µ–Ω: https://id.atlassian.com/manage-profile/security/api-tokens');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –∏—Å—Ç—ë–∫');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Atlassian Cloud');
    }
  }
}

main().catch(console.error);