{
  "serverInfo": {
    "name": "finam-trade-api",
    "version": "1.0.0"
  },
  "tools": [
    {
      "name": "Auth",
      "description": "Authenticate and get JWT token",
      "inputSchema": {
        "type": "object",
        "properties": {
          "secret_token": {
            "type": "string",
            "description": "Secret token (optional if provided at startup)"
          }
        }
      }
    },
    {
      "name": "TokenDetails",
      "description": "Get token details and permissions",
      "inputSchema": {
        "type": "object",
        "properties": {
          "jwt_token": {
            "type": "string",
            "description": "JWT token"
          }
        }
      }
    },
    {
      "name": "GetAccount",
      "description": "Get account information:\naccount_id\ntype - see enum://AccountType\nstatus - see enum://AccountStatus\nequity - Funds available plus value of open positions\nunrealized_profit\npositions - Positions (open plus theoretical from active unfilled orders). Array of:\n    symbol\n    quantity - in units (signed value for long/short)\n    average_price - (not filled for FORTS positions)\n    current_price\n    daily_pnl - (not filled for FORTS)\n    unrealized_pnl\ncash - Own funds available for trading. Does not include margin funds. Array of (Money object)\nportfolio_mc? - Portfolio margin metrics\n    available_cash - Own funds available for trading (includes margin)\n    initial_margin\n    maintenance_margin\nbalance? - Account balance\ncurrency?\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          }
        },
        "required": []
      }
    },
    {
      "name": "Trades",
      "description": "Get account trades for specified time interval:\ntrades: Array of:\n  trade_id - (from exchange)\n  symbol\n  price\n  size\n  side - SIDE_BUY | SIDE_SELL\n  timestamp - (ISO 8601)\n  order_id\n  account_id\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "start_time": {
            "type": "string",
            "description": "Start time (RFC3339 format)"
          },
          "end_time": {
            "type": "string",
            "description": "End time (RFC3339 format)"
          }
        },
        "required": [
          "start_time",
          "end_time"
        ]
      }
    },
    {
      "name": "Transactions",
      "description": "Get account transactions for specified time interval\ntransactions - Aray of:\n  id\n  timestamp - (ISO 8601)\n  symbol\n  change (Money object)\n  transaction_category -  see enum://TransactionCategory\n  transaction_name\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "start_time": {
            "type": "string",
            "description": "Start time (RFC3339 format)"
          },
          "end_time": {
            "type": "string",
            "description": "End time (RFC3339 format)"
          }
        },
        "required": [
          "start_time",
          "end_time"
        ]
      }
    },
    {
      "name": "Assets",
      "description": "Get list of all available assets/instruments.\nArray of instruments (see schema://asset resource for field descriptions)",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "Clock",
      "description": "Get server time (ISO 8601)",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "GetAssetDetails",
      "description": "Get detailed information and trading parameters for a specific asset\nAsset Information: See schema://asset resource for field descriptions\n\nTrading Parameters:\n- symbol\n- account_id\n- tradeable - is trading allowed\n- longable/shortable - Long/Short availability:\n    - value - Status (AVAILABLE / NOT_AVAILABLE / HALTED)\n    - halted_days - Days remaining for long/short restrictions (if any)\n- long_risk_rate\n- short_risk_rate\n- long_collateral?/short_collateral? - Maintenance collateral for long/short (Money object)\n- min_order_size?/max_order_size? - Min/Max order size\n- trading_status",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          },
          "account_id": {
            "type": "string",
            "description": "Account ID for which the asset details will be selected (optional. Default 1982834)"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "OptionsChain",
      "description": "Get options chain for underlying asset:\nsymbol\noptions - Array of:\n    symbol - Option instrument symbol\n    type - see enum://OptionType\n    contract_size - (quantity)\n    trade_last_day\n    strike - Strike price\n    expiration_first_day\n    expiration_last_day\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Underlying asset symbol"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "Schedule",
      "description": "Get trading schedule for asset:\nsymbol\nsessions - Array:\n    type - see enum://SessionType\n    interval:\n        start_time - (ISO 8601)\n        end_time - (ISO 8601)\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "CancelOrder",
      "description": "Cancel an existing order.\nReturns the canceled order (see schema://order resource for field descriptions)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "order_id": {
            "type": "string",
            "description": "Order ID to cancel"
          }
        },
        "required": [
          "order_id"
        ]
      }
    },
    {
      "name": "GetOrder",
      "description": "Get specific order details (see schema://order resource for field descriptions)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "order_id": {
            "type": "string",
            "description": "Order ID"
          }
        },
        "required": [
          "order_id"
        ]
      }
    },
    {
      "name": "GetOrders",
      "description": "Get details for all orders for account.\nReturns array of orders (see schema://order resource for field descriptions)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "status_filter": {
            "type": "array",
            "description": "Filter orders by status (optional).\nValues: see enum://OrderStatus + 'ACTIVE' (for active orders only).\nIf empty array or not provided, returns all orders.\nIf non-empty, returns only orders with matching statuses (OR logic).\n",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number",
            "description": "Default 50"
          }
        },
        "required": []
      }
    },
    {
      "name": "PlaceOrder",
      "description": "Place a new order.\nReturns the created order (see schema://order resource for field descriptions)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "Account ID (optional. Default 1982834)"
          },
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          },
          "quantity": {
            "type": "number",
            "description": "Order quantity"
          },
          "side": {
            "type": "string",
            "enum": [
              "SIDE_BUY",
              "SIDE_SELL"
            ],
            "description": "Order side"
          },
          "type": {
            "type": "string",
            "enum": [
              "ORDER_TYPE_LIMIT",
              "ORDER_TYPE_MARKET",
              "ORDER_TYPE_STOP",
              "ORDER_TYPE_STOP_LIMIT"
            ],
            "description": "Order type"
          },
          "time_in_force": {
            "type": "string",
            "enum": [
              "TIME_IN_FORCE_DAY",
              "TIME_IN_FORCE_GTC",
              "TIME_IN_FORCE_IOC",
              "TIME_IN_FORCE_FOK"
            ],
            "description": "Time in force"
          },
          "limit_price": {
            "type": "number",
            "description": "Limit price (required for limit orders)"
          },
          "stop_price": {
            "type": "number",
            "description": "Stop price (required for stop orders)"
          },
          "stop_condition": {
            "type": "string",
            "enum": [
              "STOP_CONDITION_MORE",
              "STOP_CONDITION_LESS"
            ],
            "description": "Stop condition (optional)"
          },
          "client_order_id": {
            "type": "string",
            "description": "Unique order ID (optional). Automatically generated if not sent. (maximum 20 characters)",
            "minLength": 3,
            "maxLength": 20,
            "pattern": "^[A-Za-z0-9 ]+$"
          },
          "legs": {
            "type": "array",
            "description": "Order legs for complex orders (optional)",
            "items": {
              "type": "object",
              "properties": {
                "symbol": {
                  "type": "string",
                  "description": "Instrument symbol in format: SYMBOL@MIC (e.g. SBER@MISX)"
                },
                "quantity": {
                  "type": "number",
                  "description": "Leg quantity"
                },
                "side": {
                  "type": "string",
                  "enum": [
                    "SIDE_BUY",
                    "SIDE_SELL"
                  ],
                  "description": "Leg side"
                }
              },
              "required": [
                "symbol",
                "quantity",
                "side"
              ]
            }
          }
        },
        "required": [
          "symbol",
          "quantity",
          "side",
          "type",
          "time_in_force"
        ]
      }
    },
    {
      "name": "Bars",
      "description": "Get historical bars/candles for instrument",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          },
          "start_time": {
            "type": "string",
            "description": "Start time (RFC3339 format)"
          },
          "end_time": {
            "type": "string",
            "description": "End time (RFC3339 format)"
          },
          "timeframe": {
            "type": "string",
            "enum": [
              "TIME_FRAME_M1",
              "TIME_FRAME_M5",
              "TIME_FRAME_M15",
              "TIME_FRAME_H1",
              "TIME_FRAME_D"
            ],
            "description": "Timeframe"
          }
        },
        "required": [
          "symbol",
          "start_time",
          "end_time",
          "timeframe"
        ]
      }
    },
    {
      "name": "LastQuote",
      "description": "Get latest quote for instrument\nsymbol\nquote (for day):\n    symbol\n    timestamp (ISO 8601)\n    ask - price\n    ask_size\n    bid - price\n    bid_size\n    last - price\n    last_size\n    volume\n    turnover\n    open\n    high\n    low\n    close\n    change - Price change (last minus close)\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "LatestTrades",
      "description": "Get latest trades for instrument (max 100 records)\nsymbol\ntrades - Array:\n    trade_id\n    mpid - Market participant identifier\n    timestamp - (ISO 8601)\n    price\n    size\n    side - (buy or sell)\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "OrderBook",
      "description": "Get order book for instrument:\nsymbol\norderbook:\n    rows - Array:\n        price\n        buy_size\n        sell_size\n        action - see enum://OrderBookAction\n        mpid - Market participant identifier\n        timestamp - (ISO 8601)\n      ",
      "inputSchema": {
        "type": "object",
        "properties": {
          "symbol": {
            "type": "string",
            "description": "Instrument/Asset symbol (e.g., YDEX@MISX)"
          }
        },
        "required": [
          "symbol"
        ]
      }
    },
    {
      "name": "SearchInstruments",
      "description": "Exact instrument lookup only.\nThe LLM must infer which strict key the user means and pass exactly one of:\nsymbol (e.g., SBER@MISX),\nisin (e.g., RU000A1014L8),\nor ticker (e.g., SBER)\n\nReturns instrument details (see schema://asset resource for field descriptions))\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "A strict value of one key: symbol | isin | ticker. Examples: \"SBER@MISX\", \"RU000A1014L8\", \"SBER\"."
          }
        },
        "required": [
          "query"
        ]
      }
    }
  ],
  "prompts": [
    {
      "name": "trading-agent",
      "description": "Introduces you as a trading agent helping with brokerage account operations",
      "arguments": [
        {
          "name": "account_id",
          "description": "Account ID to work with (optional, default: 1982834)",
          "required": false
        }
      ]
    }
  ],
  "resources": [
    {
      "name": "OrderType enum values",
      "uri": "enum://OrderType",
      "description": "All possible order type values",
      "mimeType": "application/json"
    },
    {
      "name": "TimeInForce enum values",
      "uri": "enum://TimeInForce",
      "description": "All possible time in force values",
      "mimeType": "application/json"
    },
    {
      "name": "OrderStatus enum values",
      "uri": "enum://OrderStatus",
      "description": "All possible order status values",
      "mimeType": "application/json"
    },
    {
      "name": "StopCondition enum values",
      "uri": "enum://StopCondition",
      "description": "All possible stop condition values",
      "mimeType": "application/json"
    },
    {
      "name": "QuoteLevel enum values",
      "uri": "enum://QuoteLevel",
      "description": "All possible quote level values",
      "mimeType": "application/json"
    },
    {
      "name": "AccountType enum values",
      "uri": "enum://AccountType",
      "description": "All possible account type values",
      "mimeType": "application/json"
    },
    {
      "name": "AccountStatus enum values",
      "uri": "enum://AccountStatus",
      "description": "All possible account status values",
      "mimeType": "application/json"
    },
    {
      "name": "AssetType enum values",
      "uri": "enum://AssetType",
      "description": "All possible asset type values",
      "mimeType": "application/json"
    },
    {
      "name": "OptionType enum values",
      "uri": "enum://OptionType",
      "description": "All possible option type values",
      "mimeType": "application/json"
    },
    {
      "name": "SessionType enum values",
      "uri": "enum://SessionType",
      "description": "All possible session type values",
      "mimeType": "application/json"
    },
    {
      "name": "TimeFrame enum values",
      "uri": "enum://TimeFrame",
      "description": "All possible timeframe values",
      "mimeType": "application/json"
    },
    {
      "name": "TransactionCategory enum values",
      "uri": "enum://TransactionCategory",
      "description": "All possible transaction category values",
      "mimeType": "application/json"
    },
    {
      "name": "OrderBookAction enum values",
      "uri": "enum://OrderBookAction",
      "description": "All possible order book action values",
      "mimeType": "application/json"
    },
    {
      "name": "Asset/Instrument Schema",
      "uri": "schema://asset",
      "description": "Complete description of asset/instrument fields",
      "mimeType": "text/plain"
    },
    {
      "name": "Order Info Schema",
      "uri": "schema://order",
      "description": "Complete description of order information fields",
      "mimeType": "text/plain"
    },
    {
      "name": "Exchanges list",
      "uri": "exchange://list",
      "description": "List of all exchanges with names and mic codes (cached, updates every 2 hours)",
      "mimeType": "application/json"
    }
  ],
  "extractedAt": "2025-10-07T00:40:35.435Z"
}