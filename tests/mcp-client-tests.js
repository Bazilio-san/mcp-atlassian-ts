#!/usr/bin/env node
// noinspection UnnecessaryLocalVariableJS

/**
 * MCP Client for testing MCP Atlassian server over network
 */

import axios from 'axios';
import chalk from 'chalk';
import { appConfig } from '../dist/src/bootstrap/init-config.js';
import { SharedJiraTestCases, TestValidationUtils } from './shared-test-cases.js';

const { host = 'localhost', port = 3000 } = appConfig.server;
const DEFAULT_MCP_SERVER_URL = `http://localhost:${port}`;

/**
 * MCP Atlassian Test Client
 * JavaScript client for testing MCP Atlassian server functionality
 */
class MCPAtlassianClient {
  constructor (serverUrl, timeout = 30000) {
    this.serverUrl = serverUrl;
    this.requestId = 1;
    this.client = axios.create({
      baseURL: serverUrl,
      timeout,
      headers: {
        'Content-Type': 'application/json',
      },
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck () {
    const response = await this.client.get('/health');
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  async listTools () {
    const request = {
      jsonrpc: '2.0',
      id: this.requestId++,
      method: 'tools/list',
    };

    const response = await this.client.post('/mcp', request);
    return response.data;
  }

  /**
   * –í—ã–∑–≤–∞—Ç—å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
   */
  async callTool (name, args = {}) {
    const request = {
      jsonrpc: '2.0',
      id: this.requestId++,
      method: 'tools/call',
      params: {
        name,
        arguments: args,
      },
    };

    const response = await this.client.post('/mcp', request);
    return response.data;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
   */
  async getToolInfo (name) {
    const request = {
      jsonrpc: '2.0',
      id: this.requestId++,
      method: 'tools/info',
      params: { name },
    };

    const response = await this.client.post('/mcp', request);
    return response.data;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
   */
  async ping () {
    try {
      const health = await this.healthCheck();
      return health.status === 'ok';
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
   */
  async getCacheStats () {
    try {
      const response = await this.client.get('/cache/stats');
      return response.data;
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return null;
    }
  }
}

/**
 * JIRA-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */
class JiraTestClient extends MCPAtlassianClient {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É JIRA
   */
  async getIssue (issueKey, options = {}) {
    return this.callTool('jira_get_issue', {
      issueKey,
      ...options,
    });
  }

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á JIRA
   */
  async searchIssues (jql, options = {}) {
    return this.callTool('jira_search_issues', {
      jql,
      startAt: options.startAt || 0,
      maxResults: options.maxResults || 50,
      fields: options.fields,
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É JIRA
   */
  async createIssue (params) {
    return this.callTool('jira_create_issue', params);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
   */
  async getProjects () {
    return this.callTool('jira_get_projects', {});
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ
   */
  async addComment (issueKey, body) {
    return this.callTool('jira_add_comment', {
      issueKey,
      body,
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  async getTransitions (issueKey) {
    return this.callTool('jira_get_transitions', {
      issueKey,
    });
  }
}

/**
 * Test Runner –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MCP Atlassian —Å–µ—Ä–≤–µ—Ä–∞
 */
class MCPTestRunner {
  constructor (client) {
    this.client = client;
    this.results = [];
    this.testCases = new SharedJiraTestCases({
      testProjectKey: 'TEST',
      testUsername: 'admin'
    });
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
   */
  async runTest (name, testFn) {
    const startTime = Date.now();

    try {
      console.log(chalk.blue(`üß™ Running test: ${name}`));
      const data = await testFn();
      const duration = Date.now() - startTime;

      console.log(chalk.green(`‚úÖ Test passed: ${name} (${duration}ms)`));

      return {
        name,
        success: true,
        duration,
        data,
      };
    } catch (error) {
      const duration = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : String(error);

      console.log(chalk.red(`‚ùå Test failed: ${name} (${duration}ms)`));
      console.log(chalk.red(`   Error: ${errorMessage}`));

      return {
        name,
        success: false,
        duration,
        error: errorMessage,
      };
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
   */
  async testConnection () {
    const result = await this.runTest('MCP Server Connection', async () => {
      const isConnected = await this.client.ping();
      if (!isConnected) {
        throw new Error('Cannot connect to MCP server');
      }

      const health = await this.client.healthCheck();
      return health;
    });

    this.results.push(result);
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  async testListTools () {
    const result = await this.runTest('List Available Tools', async () => {
      const response = await this.client.listTools();

      if (response.error) {
        throw new Error(`MCP Error: ${response.error.message}`);
      }

      const tools = response.result?.tools || [];
      if (tools.length === 0) {
        throw new Error('No tools available');
      }

      console.log(chalk.gray(`   Found ${tools.length} tools`));
      return tools;
    });

    this.results.push(result);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç-–∫–µ–π—Å –∏–∑ shared test cases
   */
  async runSharedTestCase(testCase) {
    const result = await this.runTest(testCase.name, async () => {
      // –í—ã–ø–æ–ª–Ω—è–µ–º MCP –≤—ã–∑–æ–≤
      const response = await this.client.callTool(testCase.mcpTool, testCase.mcpArgs);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º MCP –æ—Ç–≤–µ—Ç
      const validation = TestValidationUtils.validateMcpResponse(response, testCase);
      if (!validation.success) {
        throw new Error(validation.message);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      if (testCase.cleanup) {
        testCase.cleanup(response.result);
      }

      console.log(chalk.gray(`   ${testCase.description} - completed successfully`));
      return response.result;
    });

    this.results.push(result);
    return result;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
   */
  async runAllTests () {
    console.log(chalk.yellow('üöÄ Starting MCP Atlassian integration tests...\n'));

    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await this.testConnection();
    await this.testListTools();

    // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç-–∫–µ–π—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testCases = this.testCases.getMinimalTestCases();
    
    console.log(chalk.blue(`\nüìã Running ${testCases.length} shared test cases...\n`));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    for (const testCase of testCases) {
      try {
        await this.runSharedTestCase(testCase);
      } catch (error) {
        console.log(chalk.red(`‚ùå Test case failed: ${testCase.name}`));
        console.log(chalk.red(`   Error: ${error.message}`));
      }
    }

    return this.results;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
   */
  async runExtendedTests() {
    console.log(chalk.yellow('üöÄ Starting EXTENDED MCP Atlassian integration tests...\n'));

    // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await this.testConnection();
    await this.testListTools();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    const allTestCases = this.testCases.getAllTestCases();
    const testCasesList = [
      ...allTestCases.informational,
      ...allTestCases.modifying,
      ...allTestCases.extended
    ];
    
    console.log(chalk.blue(`\nüìã Running ${testCasesList.length} comprehensive test cases...\n`));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç-–∫–µ–π—Å—ã
    for (const testCase of testCasesList) {
      try {
        await this.runSharedTestCase(testCase);
      } catch (error) {
        console.log(chalk.red(`‚ùå Test case failed: ${testCase.name}`));
        console.log(chalk.red(`   Error: ${error.message}`));
      }
    }

    return this.results;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
   */
  printSummary () {
    console.log('\n' + chalk.yellow('üìä Test Summary:'));
    console.log('='.repeat(50));

    const passed = this.results.filter(r => r.success).length;
    const failed = this.results.filter(r => !r.success).length;
    const totalTime = this.results.reduce((sum, r) => sum + r.duration, 0);

    console.log(chalk.green(`‚úÖ Passed: ${passed}`));
    console.log(chalk.red(`‚ùå Failed: ${failed}`));
    console.log(chalk.blue(`‚è±Ô∏è  Total time: ${totalTime}ms`));

    if (failed > 0) {
      console.log(chalk.red('\nüîç Failed tests:'));
      this.results
        .filter(r => !r.success)
        .forEach(r => {
          console.log(chalk.red(`  ‚Ä¢ ${r.name}: ${r.error}`));
        });
    }

    console.log('\n' + chalk.yellow('‚ú® Test execution completed!'));
    console.log('='.repeat(50));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
   */
  getResults () {
    return this.results;
  }
}

async function main () {
  const args = process.argv.slice(2);
  const command = args[0] || 'test';
  const isExtended = args.includes('--extended') || args.includes('-e');

  switch (command) {
    case 'test':
      await runTests(isExtended);
      break;

    case 'help':
    default:
      showHelp();
      break;
  }
}

async function runTests (isExtended = false) {
  const testType = isExtended ? 'EXTENDED MCP client tests' : 'MCP client tests';
  console.log(`üß™ Running ${testType} against running MCP server...`);
  console.log('üìç MCP Server URL:', DEFAULT_MCP_SERVER_URL);
  console.log('‚ö†Ô∏è  Make sure MCP server is running and JIRA emulator is available\n');

  const client = new JiraTestClient(DEFAULT_MCP_SERVER_URL);
  const runner = new MCPTestRunner(client);

  try {
    if (isExtended) {
      await runner.runExtendedTests();
    } else {
      await runner.runAllTests();
    }
    
    runner.printSummary();

    const results = runner.getResults();
    const failed = results.filter(r => !r.success).length;

    process.exit(failed > 0 ? 1 : 0);
  } catch (error) {
    console.error('‚ùå Test execution failed:', error.message);
    process.exit(1);
  }
}

function showHelp () {
  console.log(`
MCP Atlassian Network Test Client

Usage:
  node tests/mcp-client-tests.js [command] [options]

Commands:
  test        Run MCP client tests against running MCP server (default)
  help        Show this help

Options:
  --extended, -e    Run extended comprehensive test suite

Examples:
  node tests/mcp-client-tests.js                 # Run standard tests
  node tests/mcp-client-tests.js --extended      # Run extended tests
  node tests/mcp-client-tests.js test -e         # Run extended tests

Prerequisites:
  1. Start JIRA emulator:
     node tests/jira-emulator.js
  
  2. Start MCP server with:
     ATLASSIAN_URL=http://localhost:8080 TRANSPORT_TYPE=http npm start

Notes:
  - This client tests a running MCP server over HTTP
  - MCP server should be running on port 3000 (or configured port)
  - JIRA emulator should be running on port 8080
  - Uses shared test cases from tests/shared-test-cases.js
`);
}

main().catch(error => {
  console.error('‚ùå Error:', error.message);
  process.exit(1);
});
