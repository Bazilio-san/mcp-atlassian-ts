// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ OpenAI
import { InMemoryVectorStore } from '../../src/domains/jira/tools/projects/search-project/in-memory-store.js';
import { ProjectVectorSearch } from '../../src/domains/jira/tools/projects/search-project/vector-search.js';
import { type TKeyName } from '../../src/types/index.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
const TEST_PROJECTS: TKeyName[] = [
  { key: 'AITEX', name: 'AI –¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å' },
  { key: 'AITECH', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞' },
  { key: 'TEXTILE', name: '–¢–µ–∫—Å—Ç–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
];

// –ü—Ä–æ—Å—Ç–∞—è –º–æ–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ - —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
function createMockEmbeddings (texts: string[]): number[][] {
  console.log(`üîß Creating mock embeddings for ${texts.length} texts`);

  return texts.map(text => {
    const embedding = new Array(1536).fill(0);
    let hash = 0;

    // –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à —Ç–µ–∫—Å—Ç–∞
    for (let i = 0; i < text.length; i++) {
      const char = text.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞
    for (let i = 0; i < 1536; i++) {
      embedding[i] = Math.sin(hash + i * 0.1) * 0.5 + 0.5;
    }

    console.log(`  - "${text}" -> hash: ${hash}, first value: ${embedding[0].toFixed(4)}`);
    return embedding;
  });
}

async function main () {
  try {
    console.log('üöÄ Starting simple vector test (no OpenAI)...\n');

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    const getEmbeddingsFn = async (texts: string[]) => {
      return createMockEmbeddings(texts);
    };

    // –°–æ–∑–¥–∞–µ–º –ë–î –∏ –ø–æ–∏—Å–∫
    const vectorDB = new InMemoryVectorStore('./test-simple-vector-db');
    const vectorSearch = new ProjectVectorSearch(vectorDB, getEmbeddingsFn);

    console.log('üìä Test projects:');
    TEST_PROJECTS.forEach(p => console.log(`  - ${p.key}: ${p.name}`));
    console.log('');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    console.log('üîÑ Updating projects cache...');
    await vectorSearch.updateProjectsCache(TEST_PROJECTS);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    console.log('\nüîç Checking vector DB contents:');
    const allKeys = await vectorDB.getAllProjectKeys();
    console.log(`Keys in DB: [${allKeys.join(', ')}]`);

    if (allKeys.length === 0) {
      console.log('‚ùå NO PROJECTS SAVED TO VECTOR DB!');
      return;
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ë–î
    console.log('\nüî¨ Testing direct vector search:');
    const aitexEmbeddingArray = createMockEmbeddings(['AITEX']);
    const aitexEmbedding = aitexEmbeddingArray[0];
    console.log(`AITEX embedding created: ${aitexEmbedding?.length} dimensions`);

    const directResults = await vectorDB.search(aitexEmbedding!, 10, 0.0);
    console.log(`Direct search found ${directResults.length} results:`);
    directResults.forEach((r, i) => {
      console.log(`  ${i + 1}. ${r.key} - ${r.name} (score: ${r.score.toFixed(6)})`);
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ProjectVectorSearch
    console.log('\nüîç Testing through ProjectVectorSearch:');

    console.log('\n1. Searching for "AITEX":');
    const results1 = await vectorSearch.searchProjects('AITEX', 7);
    console.log(`Found ${results1.length} results:`);
    results1.forEach((result, index) => {
      const percentage = Math.round((result.score || 0) * 100);
      console.log(`  ${index + 1}. ${result.key} (${result.name}) - ${(result.score || 0).toFixed(6)} (${percentage}%)`);
    });

    console.log('\n2. Searching for "AITECH":');
    const results2 = await vectorSearch.searchProjects('AITECH', 7);
    console.log(`Found ${results2.length} results:`);
    results2.forEach((result, index) => {
      const percentage = Math.round((result.score || 0) * 100);
      console.log(`  ${index + 1}. ${result.key} (${result.name}) - ${(result.score || 0).toFixed(6)} (${percentage}%)`);
    });

    console.log('\n3. Searching for "AI":');
    const results3 = await vectorSearch.searchProjects('AI', 7);
    console.log(`Found ${results3.length} results:`);
    results3.forEach((result, index) => {
      const percentage = Math.round((result.score || 0) * 100);
      console.log(`  ${index + 1}. ${result.key} (${result.name}) - ${(result.score || 0).toFixed(6)} (${percentage}%)`);
    });

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä Analysis:');

    const aitechInAitex = results1.find(r => r.key === 'AITECH');
    if (aitechInAitex) {
      const score = aitechInAitex.score || 0;
      const percentage = Math.round(score * 100);
      console.log(`‚úÖ AITECH found when searching AITEX: ${percentage}% (score: ${score.toFixed(6)})`);

      if (percentage >= 50) {
        console.log('üéØ GOOD MATCH! Vector search is working properly');
      } else {
        console.log('‚ö†Ô∏è Low similarity score, but vector search is working');
      }
    } else {
      console.log('‚ùå AITECH NOT FOUND when searching AITEX');
    }

    console.log('\n‚úÖ Simple vector test completed!');

  } catch (error) {
    console.error('‚ùå Error:', (error as Error).message);
    console.error((error as Error).stack);
  }
}

main().catch(console.error);
