// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ HTTP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ JIRA

import {
  searchProjects,
} from '../../dist/src/domains/jira/tools/projects/search-project/index.js';
import { getProjectsCache } from '../../dist/src/domains/jira/tools/projects/search-project/projects-cache.js';
import { createAuthenticationManager } from '../../dist/src/core/auth.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö)
const testQueries = [
  '–∞–Ω—Ç–∏—Ñ—Ä–æ–¥',
  '–∞–Ω—Ç–∏—Ñ—Ä–∞—É–¥',
  'AITECH',
  'AI-TECH',
  'AI_TECH',
  'AITEX',
  'AI-TEX',
  'AI_TEX',
  '–∞–∏—Ç–µ—á',
  '–∞–∏—Ç–µ—Ö',
  '–∞–∏ —Ç–µ—Ö',
  '–∞–π—Ç–µ—Ö',
  '–∞–π—Ç—ç–∫',
  '–∞–π—Ç–µ–∫',

  'FINOFFICE',
  '—Ñ–∏–Ω–æ—Ñ–∏—Å',
  'fin office',
];

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runDirectSearchTests () {
  try {
    // Initialize HTTP client and projects cache first
    // Use local emulator for testing
    const jiraUrl = process.env.JIRA_URL || 'http://localhost:8080';
    const jiraUsername = process.env.JIRA_USERNAME || 'admin';
    const jiraPassword = process.env.JIRA_PASSWORD || 'admin';

    const authConfig = {
      type: 'basic',
      username: jiraUsername,
      password: jiraPassword,
    };

    const authManager = createAuthenticationManager(authConfig, jiraUrl);

    const projectsResult = await getProjectsCache(); // VVA
    if (projectsResult.error || projectsResult.result.length === 0) {
      console.log('–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }

    console.log('–∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResult.result.length);
    console.log('');

    let totalTests = 0;
    let successfulTests = 0;

    for (const query of testQueries) {
      totalTests++;
      console.log(`${query} -`);

      try {
        const results = await searchProjects(query, 5);

        if (results.length > 0) {
          successfulTests++;

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
          const resultsLine = results.slice(0, 5).map((result) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π score –æ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (—É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.0-1.0)
            const scorePercent = Math.floor(result.score * 100);
            return `${result.key} (${scorePercent})`;
          }).join(', ');

          console.log(`   ${resultsLine}`);
        } else {
          console.log('   –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
      } catch (error) {
        console.log(`   –æ—à–∏–±–∫–∞: ${error.message}`);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 200));
    }

    console.log('');
    console.log(`—É—Å–ø–µ—à–Ω–æ: ${successfulTests} –∏–∑ ${totalTests}`);

  } catch (error) {
    console.log('–æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–∫—Ä—ã–≤–∞—è –ª–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const originalLog = console.log;
console.log = (() => {
  let initializationComplete = false;

  return (...args) => {
    const message = String(args[0] || '');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
    if (initializationComplete || message.includes('–∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤')) {
      initializationComplete = true;
      originalLog.apply(console, args);
    }
  };
})();

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runDirectSearchTests().catch((error) => {
  console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.error('Stack:', error.stack);
  process.exit(1);
});
