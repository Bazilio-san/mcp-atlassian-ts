#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –ü–æ–∏—Å–∫ –ø–æ 15 —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
 * 2. –°–±—Ä–æ—Å –ë–î –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 * 3. –ü–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
 * 4. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º –∂–µ –∑–∞–ø—Ä–æ—Å–∞–º
 */

import { execSync } from 'child_process';
import {
  initializeVectorSearch,
  searchProjects,
  updateProjectsIndex,
  clearVectorIndex,
  resetVectorSearchSingleton,
} from '../../dist/src/domains/jira/tools/projects/search-project/index.js';

// –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  gray: '\x1b[90m',
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
const TEST_PROJECTS = [
  { key: 'AITECH', name: 'AI TECH', issueTypes: ['Epic', 'Task', 'Bug'] },
  { key: 'DEMO', name: 'Demo Project', issueTypes: ['Task', 'Bug'] },
  { key: 'TEST', name: 'Test Project', issueTypes: ['Story', 'Task'] },
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const TEST_QUERIES = [
  { query: 'AITECH', targetProject: 'AITECH', maxScore: 0.1, description: 'Exact match uppercase' },
  { query: 'AI TECH', targetProject: 'AITECH', maxScore: 0.2, description: 'With space' },
  { query: 'AI', targetProject: 'AITECH', maxScore: 0.5, description: 'Partial match' },
  { query: 'TECH AI', targetProject: 'AITECH', maxScore: 0.7, description: 'Reversed words' },
  { query: 'AITEXMETALO', targetProject: null, maxScore: 1.0, description: 'Non-existent project' },
  { query: 'tech', targetProject: 'AITECH', maxScore: 0.3, description: 'Lowercase partial' },
  { query: 'ai tec', targetProject: 'AITECH', maxScore: 0.4, description: 'With typo' },
  { query: 'ai tech', targetProject: 'AITECH', maxScore: 0.2, description: 'Lowercase with space' },
  { query: 'aitech', targetProject: 'AITECH', maxScore: 0.1, description: 'Lowercase exact' },
  { query: 'aitex', targetProject: 'AITECH', maxScore: 0.5, description: 'Partial with typo' },
  { query: '–∞–π—Ç–µ—Ö', targetProject: 'AITECH', maxScore: 0.3, description: 'Cyrillic transliteration' },
  { query: '–∏–∏ —Ç–µ—Ö', targetProject: 'AITECH', maxScore: 0.4, description: 'Cyrillic with space' },
  { query: '–∞–∏ —Ç–µ—Ö', targetProject: 'AITECH', maxScore: 0.4, description: 'Cyrillic alternative' },
  { query: '–ò–ò', targetProject: 'AITECH', maxScore: 0.5, description: 'Cyrillic abbreviation' },
  { query: 'demo', targetProject: 'DEMO', maxScore: 0.1, description: 'Demo project search' },
];

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
 */
async function runSearchTests (testRun) {
  console.log(`\n${colors.cyan}=== ${testRun} ====${colors.reset}\n`);

  let passed = 0;
  let failed = 0;

  for (const test of TEST_QUERIES) {
    try {
      const results = await searchProjects(test.query);

      const topResult = results[0];
      const success =
        (test.targetProject === null && (!topResult || results.length === 0)) ||
        (topResult && topResult.key === test.targetProject && topResult.score <= test.maxScore);

      if (success) {
        console.log(`${colors.green}‚úÖ${colors.reset} "${test.query}" ‚Üí ${
          topResult ? `${topResult.key} (${topResult.score.toFixed(3)})` : 'no results'
        } ${colors.gray}// ${test.description}${colors.reset}`);
        passed++;
      } else {
        console.log(`${colors.red}‚ùå${colors.reset} "${test.query}" ‚Üí ${
          topResult ? `${topResult.key} (${topResult.score.toFixed(3)})` : 'no results'
        } ${colors.gray}// Expected: ${test.targetProject || 'no results'}${colors.reset}`);
        failed++;
      }
    } catch (error) {
      console.log(`${colors.red}‚ùå${colors.reset} "${test.query}" - Error: ${error.message}`);
      failed++;
    }
  }

  console.log(`\n${colors.blue}Results: ${colors.green}${passed} passed${colors.reset}, ${
    failed > 0 ? colors.red : colors.gray}${failed} failed${colors.reset}`);

  return { passed, failed };
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
 */
async function runComprehensiveTest () {
  console.log(`${colors.yellow}${'='.repeat(60)}${colors.reset}`);
  console.log(`${colors.yellow}     COMPREHENSIVE VECTOR SEARCH TEST${colors.reset}`);
  console.log(`${colors.yellow}${'='.repeat(60)}${colors.reset}`);

  try {
    // –°–Ω–∞—á–∞–ª–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
    console.log(`\n${colors.cyan}Building project...${colors.reset}`);
    execSync('npm run build', { stdio: 'inherit' });

    // ========== –§–ê–ó–ê 1: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ ==========
    console.log(`\n${colors.yellow}üìã PHASE 1: Initial search with existing data${colors.reset}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    console.log(`${colors.gray}Initializing vector search...${colors.reset}`);
    let vectorSearch = await initializeVectorSearch();

    if (!vectorSearch) {
      console.error(`${colors.red}‚ùå Failed to initialize vector search${colors.reset}`);
      process.exit(1);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    const phase1Results = await runSearchTests('Phase 1: Search with existing data');

    // ========== –§–ê–ó–ê 2: –°–±—Ä–æ—Å –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ==========
    console.log(`\n${colors.yellow}üîÑ PHASE 2: Reset DB and force update${colors.reset}`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    console.log(`${colors.gray}Clearing vector index...${colors.reset}`);
    await clearVectorIndex();

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    console.log(`${colors.gray}Updating vector index with test projects...${colors.reset}`);
    console.log(`${colors.gray}Watch for embedding progress below:${colors.reset}\n`);

    await updateProjectsIndex(TEST_PROJECTS);

    console.log(`\n${colors.green}‚úÖ Vector index updated${colors.reset}`);

    // ========== –§–ê–ó–ê 3: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ –ø–∞–º—è—Ç–∏ ==========
    console.log(`\n${colors.yellow}üíæ PHASE 3: Re-initialize from persisted data${colors.reset}`);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º (–¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –¥–∏—Å–∫–∞)
    console.log(`${colors.gray}Re-initializing vector search (should load from disk)...${colors.reset}`);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    resetVectorSearchSingleton();
    vectorSearch = await initializeVectorSearch();

    if (!vectorSearch) {
      console.error(`${colors.red}‚ùå Failed to re-initialize vector search${colors.reset}`);
      process.exit(1);
    }

    // ========== –§–ê–ó–ê 4: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ==========
    console.log(`\n${colors.yellow}üîç PHASE 4: Search after re-initialization${colors.reset}`);

    const phase4Results = await runSearchTests('Phase 4: Search after re-init');

    // ========== –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==========
    console.log(`\n${colors.yellow}${'='.repeat(60)}${colors.reset}`);
    console.log(`${colors.yellow}                    FINAL RESULTS${colors.reset}`);
    console.log(`${colors.yellow}${'='.repeat(60)}${colors.reset}\n`);

    const totalPassed = phase1Results.passed + phase4Results.passed;
    const totalFailed = phase1Results.failed + phase4Results.failed;
    const totalTests = TEST_QUERIES.length * 2; // 2 —Ñ–∞–∑—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    console.log(`${colors.cyan}Phase 1:${colors.reset} ${colors.green}${phase1Results.passed}/${TEST_QUERIES.length} passed${colors.reset}`);
    console.log(`${colors.cyan}Phase 4:${colors.reset} ${colors.green}${phase4Results.passed}/${TEST_QUERIES.length} passed${colors.reset}`);
    console.log();
    console.log(`${colors.cyan}Total:${colors.reset} ${colors.green}${totalPassed}/${totalTests} tests passed${colors.reset}`);

    if (totalFailed === 0) {
      console.log(`\n${colors.green}‚úÖ ALL TESTS PASSED!${colors.reset}`);
      console.log(`${colors.gray}Vector search with in-memory store and persistence works correctly.${colors.reset}`);
    } else {
      console.log(`\n${colors.red}‚ùå SOME TESTS FAILED${colors.reset}`);
      console.log(`${colors.gray}Please check the implementation.${colors.reset}`);
    }

    console.log(`\n${colors.yellow}${'='.repeat(60)}${colors.reset}\n`);

    process.exit(totalFailed === 0 ? 0 : 1);

  } catch (error) {
    console.error(`\n${colors.red}‚ùå Test failed with error:${colors.reset}`, error);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runComprehensiveTest().catch(error => {
  console.error(`${colors.red}Unhandled error:${colors.reset}`, error);
  process.exit(1);
});
