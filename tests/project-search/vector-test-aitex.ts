// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è AITEX/AITECH
import { InMemoryVectorStore } from '../../src/domains/jira/tools/projects/search-project/in-memory-store.js';
import { ProjectVectorSearch } from '../../src/domains/jira/tools/projects/search-project/vector-search.js';
import { createOpenAIClient, getEmbeddings, EMBEDDING_MODELS } from '../../src/domains/jira/tools/projects/search-project/openai-client.js';
import { type TKeyName } from '../../src/types/index.js';

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤–∫–ª—é—á–∞—é—â–∏–µ AITECH
const TEST_PROJECTS: TKeyName[] = [
  { key: 'AITEX', name: 'AI –¢–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å' },
  { key: 'AITECH', name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞' },
  { key: 'TEXTILE', name: '–¢–µ–∫—Å—Ç–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' },
  { key: 'TECH', name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è' },
  { key: 'AUTO', name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤' },
  { key: 'DATA', name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö' },
  { key: 'AI', name: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' },
  { key: 'ML', name: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' },
];

async function main () {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(1);
  }

  try {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...\n');

    // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    const openaiClient = createOpenAIClient(apiKey);

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å dimensions 1536
    // –ó–ê–ú–û–ö –î–õ–Ø –¢–ï–°–¢–ê: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ —Ç–µ–∫—Å—Ç–∞
    const getEmbeddingsFn = async (texts: string[]) => {
      try {
        const result = await getEmbeddings(
          openaiClient,
          texts,
          EMBEDDING_MODELS.DEFAULT.model,
          1536  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dimensions –≤ 1536
        );
        return result.embeddings;
      } catch (error) {
        console.log('üîß OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏');
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–æ–∫–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        return texts.map(text => {
          const embedding = new Array(1536).fill(0);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
          let hash = 0;
          for (let i = 0; i < text.length; i++) {
            const char = text.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // 32-bit integer
          }
          // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥—É
          for (let i = 0; i < 1536; i++) {
            embedding[i] = Math.sin(hash + i) * 0.5 + 0.5;
          }
          return embedding;
        });
      }
    };

    // –°–æ–∑–¥–∞–µ–º in-memory –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î –∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫
    const vectorDB = new InMemoryVectorStore('./test-vector-db');
    const vectorSearch = new ProjectVectorSearch(vectorDB, getEmbeddingsFn);

    console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    console.log('–ü—Ä–æ–µ–∫—Ç—ã:');
    TEST_PROJECTS.forEach(p => console.log(`  - ${p.key}: ${p.name}`));
    console.log('');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
    await vectorSearch.updateProjectsCache(TEST_PROJECTS);

    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:');
    const allKeys = await vectorDB.getAllProjectKeys();
    console.log(`–ö–ª—é—á–∏ –≤ –ë–î: ${allKeys}`);

    if (allKeys.length > 0) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ë–î
      const [aitechEmbedding] = await getEmbeddingsFn(['AITEX']);
      if (aitechEmbedding) {
        const directResults = await vectorDB.search(aitechEmbedding, 10, 0.0);
        console.log(`–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ë–î –¥–ª—è AITEX: ${directResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        directResults.forEach((r, i) => {
          console.log(`  ${i + 1}. ${r.key} - ${r.name} (score: ${r.score.toFixed(4)})`);
        });
      }
    }

    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ "AITEX":');
    const results = await vectorSearch.searchProjects('AITEX', 7);

    if (results.length === 0) {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ï–ó–£–õ–¨–¢–ê–¢–û–í!');
      console.log('   –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ.');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`);
      results.forEach((result, index) => {
        const percentage = Math.round((result.score || 0) * 100);
        console.log(`  ${index + 1}. ${result.key} (${result.name}) - ${(result.score || 0).toFixed(4)} (${percentage}%)`);
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ AITECH –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const aitechResult = results.find(r => r.key === 'AITECH');
      if (aitechResult) {
        const percentage = Math.round((aitechResult.score || 0) * 100);
        console.log(`\nüéØ AITECH –Ω–∞–π–¥–µ–Ω —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é ${percentage}% (score: ${(aitechResult.score || 0).toFixed(4)})`);
        if (percentage >= 67) {
          console.log('‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å >= 67% - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º!');
        } else {
          console.log('‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å < 67% - –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ');
        }
      } else {
        console.log('\n‚ùå AITECH –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞!');
        console.log('   –û–∂–∏–¥–∞–ª—Å—è –º–∞—Ç—á —Å ~67% —Ç–æ—á–Ω–æ—Å—Ç–∏');
      }
    }

    console.log('\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ "AITECH":');
    const aitechResults = await vectorSearch.searchProjects('AITECH', 7);

    if (aitechResults.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${aitechResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "AITECH":`);
      aitechResults.forEach((result, index) => {
        const percentage = Math.round((result.score || 0) * 100);
        console.log(`  ${index + 1}. ${result.key} (${result.name}) - ${(result.score || 0).toFixed(4)} (${percentage}%)`);
      });
    } else {
      console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¥–ª—è "AITECH"!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', (error as Error).message);
    console.error((error as Error).stack);
    process.exit(1);
  }
}

main().catch(console.error);