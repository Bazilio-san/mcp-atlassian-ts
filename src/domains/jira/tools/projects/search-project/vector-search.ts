// –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ JIRA
// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ multi-bot –ø—Ä–æ–µ–∫—Ç–∞

import { transliterate, transliterateRU } from './transliterate.js';
import { fillEmbeddingsCore, estimateTokens, type TEmbeddingArray } from './embeddings.js';
import {
  type JiraProjectWithIssueTypes,
  type JiraProjectSearchResult,
  type ProjectEmbeddingRecord,
  type JiraProjectWithSymbols,
  SYM_KEY_LC,
  SYM_NAME_LC,
  SYM_TR_RU_KEY_LC,
  SYM_TR_RU_KEY_UC,
  SYM_TR_RU_NAME_LC,
  SYM_TR_NAME_UC,
} from './types.js';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
export interface IVectorDB {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
  upsertRecords (records: ProjectEmbeddingRecord[]): Promise<void>;

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
  search (embedding: number[], limit: number, threshold: number): Promise<Array<{
    key: string;
    name: string;
    searchText: string;
    score: number;
  }>>;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤
  getAllProjectKeys (): Promise<string[]>;

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á–∞–º
  deleteByKeys (keys: string[]): Promise<void>;

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –ë–î
  clear (): Promise<void>;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
export class ProjectVectorSearch {
  private projectsCache: Map<string, JiraProjectWithSymbols> = new Map();
  private cacheExpireTime = 0;
  private readonly cacheTTL = 60 * 60 * 1000; // 1 —á–∞—Å

  private restorePromise: Promise<void> | null = null;

  constructor (
    private vectorDB: IVectorDB,
    private getEmbeddingsFn: (texts: string[]) => Promise<(TEmbeddingArray | null)[]>,
  ) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–≥–æ
    this.restorePromise = this.restoreCacheFromDB().catch(error => {
      console.debug('Could not restore cache from DB:', error.message);
    });
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
   */
  async waitForRestore (): Promise<void> {
    if (this.restorePromise) {
      await this.restorePromise;
      this.restorePromise = null;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
   */
  private async restoreCacheFromDB (): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î
    const projectKeys = await this.vectorDB.getAllProjectKeys();

    if (projectKeys.length === 0) {
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ö–∞–∫ - –∏—â–µ–º –ø–æ –∫–ª—é—á—É –ø—Ä–æ–µ–∫—Ç–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–º—è
    for (const key of projectKeys) {
      // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const results = await this.vectorDB.search([0], 100, 10);
      const projectResult = results.find(r => r.key === key);

      const name = projectResult?.name || key;

      const projectWithSymbols: JiraProjectWithSymbols = {
        key,
        name,
        issueTypes: ['Task', 'Bug', 'Story'] as any[], // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã
        [SYM_KEY_LC]: key.toLowerCase(),
        [SYM_NAME_LC]: name.toLowerCase(),
        [SYM_TR_RU_KEY_LC]: transliterate(key).toLowerCase(),
        [SYM_TR_RU_KEY_UC]: transliterate(key).toUpperCase(),
        [SYM_TR_RU_NAME_LC]: transliterate(name).toLowerCase(),
        [SYM_TR_NAME_UC]: transliterate(name).toUpperCase(),
      };

      this.projectsCache.set(key, projectWithSymbols);
    }

    this.cacheExpireTime = Date.now() + this.cacheTTL;
    console.debug(`Restored ${projectKeys.length} projects from vector DB`);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
   */
  async updateProjectsCache (projects: JiraProjectWithIssueTypes[]): Promise<void> {
    const now = Date.now();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
    const projectsWithSymbols: JiraProjectWithSymbols[] = projects.map(project => {
      const keyLC = project.key.toLowerCase();
      const nameLC = project.name.toLowerCase();
      const keyRuLC = transliterateRU(keyLC);

      return {
        ...project,
        [SYM_KEY_LC]: keyLC,
        [SYM_NAME_LC]: nameLC,
        [SYM_TR_RU_KEY_LC]: keyRuLC,
        [SYM_TR_RU_KEY_UC]: keyRuLC.toUpperCase(),
        [SYM_TR_NAME_UC]: transliterate(project.name).toUpperCase(),
        [SYM_TR_RU_NAME_LC]: transliterateRU(nameLC),
      };
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    this.projectsCache.clear();
    projectsWithSymbols.forEach(p => {
      this.projectsCache.set(p.key, p);
    });
    this.cacheExpireTime = now + this.cacheTTL;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
    await this.updateVectorDB(projectsWithSymbols);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
   */
  private async updateVectorDB (projects: JiraProjectWithSymbols[]): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    const existingKeys = await this.vectorDB.getAllProjectKeys();
    const existingKeysSet = new Set(existingKeys);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∏ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å
    const newProjectsMap = new Map(projects.map(p => [p.key, p]));
    const keysToDelete = existingKeys.filter(key => !newProjectsMap.has(key));
    const projectsToUpdate: JiraProjectWithSymbols[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    for (const project of projects) {
      const isNew = !existingKeysSet.has(project.key);
      const existingProject = this.projectsCache.get(project.key);

      // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏:
      // - –ü—Ä–æ–µ–∫—Ç –Ω–æ–≤—ã–π
      // - –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
      // - –ò–∑–º–µ–Ω–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ issueTypes
      if (isNew ||
        !existingProject ||
        existingProject.name !== project.name ||
        JSON.stringify(existingProject.issueTypes) !== JSON.stringify(project.issueTypes)) {
        projectsToUpdate.push(project);
      }
    }

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
    if (keysToDelete.length > 0) {
      console.log(`Deleting ${keysToDelete.length} obsolete projects from vector index`);
      await this.vectorDB.deleteByKeys(keysToDelete);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º
    if (projectsToUpdate.length === 0) {
      console.log(`Vector DB is up to date. Total projects: ${projects.length}`);
      return;
    }

    console.log(`\nüìä Updating vector DB: ${projectsToUpdate.length} projects to process`);

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const variations: ProjectEmbeddingRecord[] = [];
    const updatedAt = Date.now();

    for (const project of projectsToUpdate) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
      if (existingKeysSet.has(project.key) && projectsToUpdate.includes(project)) {
        await this.vectorDB.deleteByKeys([project.key]);
      }

      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const searchTexts = new Set([
        project.key,
        project.name,
        project[SYM_KEY_LC],
        project[SYM_NAME_LC],
        project[SYM_TR_RU_KEY_LC],
        project[SYM_TR_RU_KEY_UC],
        project[SYM_TR_RU_NAME_LC],
        project[SYM_TR_NAME_UC],
      ]);

      searchTexts.forEach(searchText => {
        if (searchText) {
          variations.push({
            key: project.key,
            name: project.name,
            searchText: searchText,
            embedding: null,
            updatedAt: updatedAt,
          });
        }
      });
    }

    console.log(`üìù Total variations to embed: ${variations.length}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    const batchTokenLimit = 8000; // –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–∞—Ç—á
    const fillEmbeddings = fillEmbeddingsCore<ProjectEmbeddingRecord>({
      getEmbeddingsFn: this.getEmbeddingsFn,
      batchTokenLimit,
      tokenCounter: estimateTokens,
      textField: 'searchText',
    });

    const recordsWithEmbeddings: ProjectEmbeddingRecord[] = [];
    let processedCount = 0;
    const startTime = Date.now();

    for await (const record of fillEmbeddings(variations)) {
      recordsWithEmbeddings.push(record);
      processedCount++;

      // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –æ—Ç–∫–∞—Ç–æ–º –∫–∞—Ä–µ—Ç–∫–∏
      const progress = Math.round((processedCount / variations.length) * 100);
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      process.stdout.write(`\r‚ö° Embedding progress: ${processedCount}/${variations.length} (${progress}%) - ${elapsed}s`);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    console.log('');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if (recordsWithEmbeddings.length > 0) {
      await this.vectorDB.upsertRecords(recordsWithEmbeddings);

      // –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      // –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–µ–¥–µ–º —Ç–æ, —á—Ç–æ –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º
      const insertedProjects = new Set(recordsWithEmbeddings.map(r => r.key));
      console.log('\n‚úÖ Vector DB updated successfully:');
      console.log(`   üìä Records inserted: ${recordsWithEmbeddings.length}`);
      console.log(`   üè¢ Unique projects inserted: ${insertedProjects.size}`);
      console.log(`   üìù Records per project: ~${Math.round(recordsWithEmbeddings.length / insertedProjects.size)}`);

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
      try {
        const allKeys = await this.vectorDB.getAllProjectKeys();
        if (allKeys.length > 0) {
          const uniqueProjects = new Set(allKeys);
          console.log('\n   üìà Total in DB after update:');
          console.log(`      Total unique projects: ${uniqueProjects.size}`);
          console.log(`      Projects: ${Array.from(uniqueProjects).slice(0, 5).join(', ')}${uniqueProjects.size > 5 ? '...' : ''}`);
        }
      } catch (error) {
        console.debug('Could not retrieve total DB stats:', error);
      }
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  async searchProjects (
    query: string,
    limit = 5,
    threshold = 0.7,
  ): Promise<JiraProjectSearchResult[]> {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    await this.waitForRestore();

    if (!query || !query.trim()) {
      return [];
    }

    const normalizedQuery = query.toLowerCase().trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–µ—à–µ
    for (const project of this.projectsCache.values()) {
      const variations = [
        project.key,
        project.name,
        project[SYM_KEY_LC],
        project[SYM_NAME_LC],
        project[SYM_TR_RU_KEY_LC],
        project[SYM_TR_RU_KEY_UC],
        project[SYM_TR_RU_NAME_LC],
        project[SYM_TR_NAME_UC],
      ];

      if (variations.some(v => v === normalizedQuery)) {
        return [{
          key: project.key,
          name: project.name,
          issueTypes: project.issueTypes,
          score: 0, // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        }];
      }
    }

    // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const [embedding] = await this.getEmbeddingsFn([query]);
    if (!embedding) {
      console.error('Failed to create embedding for query:', query);
      return [];
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    const results = await this.vectorDB.search(embedding, limit, threshold);

    // –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–µ—à–∞
    const projectResults: JiraProjectSearchResult[] = [];
    const addedKeys = new Set<string>();

    for (const result of results) {
      if (addedKeys.has(result.key)) continue;

      const project = this.projectsCache.get(result.key);
      if (project) {
        projectResults.push({
          key: result.key,
          name: result.name,
          issueTypes: project.issueTypes,
          score: Math.round(result.score * 10000) / 10000, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤
        });
        addedKeys.add(result.key);
      }
    }

    return projectResults;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è wildcard –ø–æ–∏—Å–∫–∞)
   */
  async getAllProjects (): Promise<JiraProjectSearchResult[]> {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    await this.waitForRestore();

    const projects = Array.from(this.projectsCache.values());
    return projects
      .sort((a, b) => a.key.localeCompare(b.key))
      .map(p => ({
        key: p.key,
        name: p.name,
        issueTypes: p.issueTypes,
        score: 0,
      }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
   */
  isCacheValid (): boolean {
    return Date.now() < this.cacheExpireTime && this.projectsCache.size > 0;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –ë–î
   */
  async clear (): Promise<void> {
    this.projectsCache.clear();
    this.cacheExpireTime = 0;
    await this.vectorDB.clear();
  }
}
