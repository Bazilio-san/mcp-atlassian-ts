// –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ JIRA

import { transliterate, transliterateRU } from './transliterate.js';
import { fillEmbeddingsCore, estimateTokens, type TEmbeddingArray } from './embeddings.js';
import {
  type TKeyNameScore,
  type ProjectEmbeddingRecord,
  type JiraProjectWithSymbols,
  SYM_KEY_LC,
  SYM_NAME_LC,
  SYM_TR_RU_KEY_LC,
  SYM_TR_RU_KEY_UC,
  SYM_TR_RU_NAME_LC,
  SYM_TR_NAME_UC,
} from './types.js';
import { TKeyName } from '../../../../../types';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
export interface IVectorDB {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
  upsertRecords (records: ProjectEmbeddingRecord[]): Promise<void>;

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
  search (embedding: number[], limit: number, threshold: number): Promise<Array<{
    key: string;
    name: string;
    searchText: string;
    score: number;
  }>>;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø—Ä–æ–µ–∫—Ç–æ–≤
  getAllProjectKeys (): Promise<string[]>;

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á–∞–º
  deleteByKeys (keys: string[]): Promise<void>;

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –ë–î
  clear (): Promise<void>;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
export class ProjectVectorSearch {
  private projectsCache: Map<string, JiraProjectWithSymbols> = new Map();
  private cacheExpireTime = 0;
  private readonly cacheTTL = 60 * 60 * 1000; // 1 —á–∞—Å

  private restorePromise: Promise<void> | null = null;

  constructor (
    private vectorDB: IVectorDB,
    private getEmbeddingsFn: (texts: string[]) => Promise<(TEmbeddingArray | null)[]>,
  ) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ–≥–æ
    this.restorePromise = this.restoreCacheFromDB().catch(error => {
      console.debug('Could not restore cache from DB:', error.message);
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω—É–∂–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
   */
  async updateCacheOnlyForFallback (projects: TKeyName[]): Promise<void> {
    console.log('üì•  Updating project cache for fallback search...');
    console.log(`   Loading ${projects.length} projects from JIRA API`);

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const projectsWithSymbols: JiraProjectWithSymbols[] = projects.map(project => {
      const keyLC = project.key.toLowerCase();
      const nameLC = project.name.toLowerCase();
      const keyRuLC = transliterateRU(keyLC);

      return {
        ...project,
        [SYM_KEY_LC]: keyLC,
        [SYM_NAME_LC]: nameLC,
        [SYM_TR_RU_KEY_LC]: keyRuLC,
        [SYM_TR_RU_KEY_UC]: keyRuLC.toUpperCase(),
        [SYM_TR_NAME_UC]: transliterate(project.name).toUpperCase(),
        [SYM_TR_RU_NAME_LC]: transliterateRU(nameLC),
      };
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–µ—à –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î)
    this.projectsCache.clear();
    projectsWithSymbols.forEach(p => {
      this.projectsCache.set(p.key, p);
    });
    this.cacheExpireTime = Date.now() + this.cacheTTL;

    console.log('‚úÖ  Project cache updated successfully for fallback search');
    console.log(`   üìä  Projects loaded: ${projectsWithSymbols.length}`);
    console.log('   üîç  Exact/substring search available for all projects\n');
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
   */
  async waitForRestore (): Promise<void> {
    if (this.restorePromise) {
      await this.restorePromise;
      this.restorePromise = null;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
   */
  private async restoreCacheFromDB (): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î
      const projectKeys = await this.vectorDB.getAllProjectKeys();

      if (projectKeys.length === 0) {
        console.debug('No projects found in vector DB cache');
        return;
      }

      console.debug(`Restoring ${projectKeys.length} projects from vector DB cache...`);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —Ö–∞–∫ - –∏—â–µ–º –ø–æ –∫–ª—é—á—É –ø—Ä–æ–µ–∫—Ç–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–º—è
      let restoredCount = 0;
      for (const key of projectKeys) {
        try {
          // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
          const results = await this.vectorDB.search([0], 100, 10);
          const projectResult = results.find(r => r.key === key);

          const name = projectResult?.name || key;

          const projectWithSymbols: JiraProjectWithSymbols = {
            key,
            name,
            [SYM_KEY_LC]: key.toLowerCase(),
            [SYM_NAME_LC]: name.toLowerCase(),
            [SYM_TR_RU_KEY_LC]: transliterate(key).toLowerCase(),
            [SYM_TR_RU_KEY_UC]: transliterate(key).toUpperCase(),
            [SYM_TR_RU_NAME_LC]: transliterate(name).toLowerCase(),
            [SYM_TR_NAME_UC]: transliterate(name).toUpperCase(),
          };

          this.projectsCache.set(key, projectWithSymbols);
          restoredCount++;
        } catch (error) {
          console.debug(`Failed to restore project ${key}:`, error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
        }
      }

      this.cacheExpireTime = Date.now() + this.cacheTTL;

      if (restoredCount > 0) {
        console.debug(`‚úÖ  Restored ${restoredCount}/${projectKeys.length} projects from vector DB cache`);
      } else {
        console.debug('‚ùå  Failed to restore any projects from vector DB cache');
      }
    } catch (error) {
      console.debug('Failed to restore cache from DB:', error);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É, –ø—Ä–æ—Å—Ç–æ –∫–µ—à –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
   */
  async updateProjectsCache (projects: TKeyName[]): Promise<void> {
    const now = Date.now();

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π
    const projectsWithSymbols: JiraProjectWithSymbols[] = projects.map(project => {
      const keyLC = project.key.toLowerCase();
      const nameLC = project.name.toLowerCase();
      const keyRuLC = transliterateRU(keyLC);

      return {
        ...project,
        [SYM_KEY_LC]: keyLC,
        [SYM_NAME_LC]: nameLC,
        [SYM_TR_RU_KEY_LC]: keyRuLC,
        [SYM_TR_RU_KEY_UC]: keyRuLC.toUpperCase(),
        [SYM_TR_NAME_UC]: transliterate(project.name).toUpperCase(),
        [SYM_TR_RU_NAME_LC]: transliterateRU(nameLC),
      };
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    this.projectsCache.clear();
    projectsWithSymbols.forEach(p => {
      this.projectsCache.set(p.key, p);
    });
    this.cacheExpireTime = now + this.cacheTTL;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
    await this.updateVectorDB(projectsWithSymbols);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
   */
  private async updateVectorDB (projects: JiraProjectWithSymbols[]): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    const existingKeys = await this.vectorDB.getAllProjectKeys();
    const existingKeysSet = new Set(existingKeys);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∏ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å
    const newProjectsMap = new Map(projects.map(p => [p.key, p]));
    const keysToDelete = existingKeys.filter(key => !newProjectsMap.has(key));
    const projectsToUpdate: JiraProjectWithSymbols[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    for (const project of projects) {
      const isNew = !existingKeysSet.has(project.key);
      const existingProject = this.projectsCache.get(project.key);

      // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏:
      // - –ü—Ä–æ–µ–∫—Ç –Ω–æ–≤—ã–π
      // - –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
      if (isNew || !existingProject || existingProject.name !== project.name) {
        projectsToUpdate.push(project);
      }
    }

    // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
    if (keysToDelete.length > 0) {
      console.log(`Deleting ${keysToDelete.length} obsolete projects from vector index`);
      await this.vectorDB.deleteByKeys(keysToDelete);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º
    if (projectsToUpdate.length === 0) {
      console.log(`Vector DB is up to date. Total projects: ${projects.length}`);
      return;
    }

    console.log(`üîÑ  Updating vector index: ${projectsToUpdate.length} projects to process...`);

    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    const variations: ProjectEmbeddingRecord[] = [];
    const updatedAt = Date.now();

    for (const project of projectsToUpdate) {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
      if (existingKeysSet.has(project.key) && projectsToUpdate.includes(project)) {
        await this.vectorDB.deleteByKeys([project.key]);
      }

      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const searchTexts = new Set([
        project.key,
        project.name,
        project[SYM_KEY_LC],
        project[SYM_NAME_LC],
        project[SYM_TR_RU_KEY_LC],
        project[SYM_TR_RU_KEY_UC],
        project[SYM_TR_RU_NAME_LC],
        project[SYM_TR_NAME_UC],
      ]);

      searchTexts.forEach(searchText => {
        if (searchText) {
          variations.push({
            key: project.key,
            name: project.name,
            searchText: searchText,
            embedding: null,
            updatedAt: updatedAt,
          });
        }
      });
    }

    console.log(`   üìù Generating embeddings for ${variations.length} text variations...`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–∞–∫–µ—Ç–∞–º–∏
    const batchTokenLimit = 8000; // –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –±–∞—Ç—á
    const fillEmbeddings = fillEmbeddingsCore<ProjectEmbeddingRecord>({
      getEmbeddingsFn: this.getEmbeddingsFn,
      batchTokenLimit,
      tokenCounter: estimateTokens,
      textField: 'searchText',
    });

    const recordsWithEmbeddings: ProjectEmbeddingRecord[] = [];
    let processedCount = 0;
    const startTime = Date.now();

    for await (const record of fillEmbeddings(variations)) {
      recordsWithEmbeddings.push(record);
      processedCount++;

      // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –æ—Ç–∫–∞—Ç–æ–º –∫–∞—Ä–µ—Ç–∫–∏ (\r) - —á–∏—Å–ª–∞ –º–µ–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
      const progress = Math.round((processedCount / variations.length) * 100);
      const elapsed = Math.round((Date.now() - startTime) / 1000);
      const estimatedTotal = variations.length > 0 ? Math.round(((Date.now() - startTime) / processedCount) * variations.length / 1000) : 0;

      // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: ‚¨õ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ, ‚¨ú –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è
      const barLength = 20;
      const filled = Math.floor((progress / 100) * barLength);
      const progressBar = '‚¨õ'.repeat(filled) + '‚¨ú'.repeat(barLength - filled);

      process.stdout.write(`\r   ‚ö° [${progressBar}] ${progress}% | ${processedCount}/${variations.length} | ‚è±Ô∏è ${elapsed}s / ~${estimatedTotal}s total`);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π
    const totalTime = Math.round((Date.now() - startTime) / 1000);
    process.stdout.write(`\r   ‚úÖ  Embeddings generated successfully in ${totalTime}s${' '.repeat(30)}\n`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    if (recordsWithEmbeddings.length > 0) {
      console.log('   üíæ Saving to vector database...');
      await this.vectorDB.upsertRecords(recordsWithEmbeddings);

      // –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const insertedProjects = new Set(recordsWithEmbeddings.map(r => r.key));
      const avgRecordsPerProject = Math.round(recordsWithEmbeddings.length / insertedProjects.size);

      console.log('\n‚úÖ  Vector index update completed successfully!');
      console.log(`   üìä  Updated projects: ${insertedProjects.size}`);
      console.log(`   üìù  Total records: ${recordsWithEmbeddings.length} (~${avgRecordsPerProject} per project)`);

      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
      try {
        const allKeys = await this.vectorDB.getAllProjectKeys();
        const uniqueProjects = new Set(allKeys);
        console.log(`   üóÑÔ∏è  Total projects in index: ${uniqueProjects.size}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 3)
        const projectSamples = Array.from(insertedProjects).slice(0, 3);
        if (projectSamples.length > 0) {
          const sampleText = projectSamples.join(', ') + (insertedProjects.size > 3 ? `... +${insertedProjects.size - 3} more` : '');
          console.log(`   üîÑ  Updated: ${sampleText}`);
        }
      } catch (error) {
        console.debug('Could not retrieve total DB stats:', error);
        // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–Ω–∞–µ–º —Ç–æ—á–Ω–æ
        console.log(`   ‚úÖ  Successfully updated ${insertedProjects.size} projects`);
      }
    } else {
      console.log('\n‚úÖ  No records to update - all projects are up to date');
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  async searchProjects (
    query: string,
    limit = 5,
    threshold = 0.7,
  ): Promise<TKeyNameScore[]> {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    await this.waitForRestore();

    if (!query || !query.trim()) {
      return [];
    }

    const normalizedQuery = query.toLowerCase().trim();

    // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∫–µ—à–µ
    const exactMatches = this.exactSearch(normalizedQuery, limit);
    if (exactMatches.length > 0) {
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
      return exactMatches;
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    try {
      // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const [embedding] = await this.getEmbeddingsFn([query]);
      if (!embedding) {
        console.debug('Failed to create embedding for query, falling back to substring search');
        return this.substringSearch(normalizedQuery, limit);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
      const results = await this.vectorDB.search(embedding, limit, threshold);

      // –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–µ—à–∞
      const projectResults: TKeyNameScore[] = [];
      const addedKeys = new Set<string>();

      for (const result of results) {
        if (addedKeys.has(result.key)) continue;

        const project = this.projectsCache.get(result.key);
        if (project) {
          projectResults.push({
            key: result.key,
            name: result.name,
            score: Math.round(result.score * 10000) / 10000, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤
          });
          addedKeys.add(result.key);
        }
      }

      // –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º substring –ø–æ–∏—Å–∫
      if (projectResults.length === 0) {
        console.debug('Vector search returned no results, falling back to substring search');
        return this.substringSearch(normalizedQuery, limit);
      }

      return projectResults;
    } catch (error) {
      console.debug('Vector search failed, falling back to substring search:', error);
      return this.substringSearch(normalizedQuery, limit);
    }
  }

  /**
   * –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞
   */
  private exactSearch (normalizedQuery: string, _limit: number): TKeyNameScore[] {
    for (const project of this.projectsCache.values()) {
      const variations = [
        project.key.toLowerCase(),
        project.name.toLowerCase(),
        project[SYM_KEY_LC],
        project[SYM_NAME_LC],
        project[SYM_TR_RU_KEY_LC],
        project[SYM_TR_RU_KEY_UC]?.toLowerCase(),
        project[SYM_TR_RU_NAME_LC],
        project[SYM_TR_NAME_UC]?.toLowerCase(),
      ];

      if (variations.some(v => v === normalizedQuery)) {
        return [{
          key: project.key,
          name: project.name,
          score: 1, // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        }];
      }
    }
    return [];
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫ (fallback –∫–æ–≥–¥–∞ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
   */
  private substringSearch (normalizedQuery: string, limit: number): TKeyNameScore[] {
    const matches: TKeyNameScore[] = [];

    for (const project of this.projectsCache.values()) {
      const keyMatch = project[SYM_KEY_LC].includes(normalizedQuery);
      const nameMatch = project[SYM_NAME_LC].includes(normalizedQuery);

      if (keyMatch || nameMatch) {
        matches.push({
          key: project.key,
          name: project.name,
          score: keyMatch ? 0.9 : 0.8, // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–ª—é—á—É
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (–∫–ª—é—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã—à–µ) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return matches
      .sort((a, b) => (b.score || 0) - (a.score || 0) || a.key.localeCompare(b.key))
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è wildcard –ø–æ–∏—Å–∫–∞)
   */
  async getAllProjects (): Promise<TKeyNameScore[]> {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞
    await this.waitForRestore();

    const projects = Array.from(this.projectsCache.values());
    return projects
      .sort((a, b) => a.key.localeCompare(b.key))
      .map(p => ({
        key: p.key,
        name: p.name,
        score: 0,
      }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
   */
  isCacheValid (): boolean {
    return Date.now() < this.cacheExpireTime && this.projectsCache.size > 0;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ –ë–î
   */
  async clear (): Promise<void> {
    this.projectsCache.clear();
    this.cacheExpireTime = 0;
    await this.vectorDB.clear();
  }
}
