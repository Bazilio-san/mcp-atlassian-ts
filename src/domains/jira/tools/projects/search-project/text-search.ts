// In-memory —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º string similarity
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–µ—à–∞ —Å –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏

import { phraseSimilarity } from '../../../../../core/utils/string-similarity.js';
import { type TKeyNameScore } from './types.js';
import { type TKeyName } from '../../../../../types';
import { getOptimizedProjectsCache, type ProjectCacheEntry } from './projects-cache.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ string similarity
 * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ—à —Å –ø—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
 */
export class ProjectTextSearch {
  constructor () {
    // –ö–µ—à —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ projects-cache.ts
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ - –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è,
   * –∫–µ—à —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –≤ projects-cache.ts
   */
  async updateProjectsCache (projects: TKeyName[]): Promise<void> {
    console.log('üì•  Text search now uses optimized centralized cache...');
    console.log(`   ${projects.length} projects available for search`);
    console.log('‚úÖ  Text similarity search ready\n');
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º string similarity
   */
  async searchProjects (query: string, limit = 5): Promise<TKeyNameScore[]> {
    if (!query || !query.trim()) {
      return [];
    }

    const cache = getOptimizedProjectsCache();
    if (!cache) {
      return [];
    }

    const normalizedQuery = query.toLowerCase().trim();

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const exactMatches = this.exactSearch(normalizedQuery, cache);
    if (exactMatches.length > 0) {
      return exactMatches.slice(0, limit);
    }

    // –ò—â–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    const results: Array<{ key: string; name: string; score: number }> = [];

    for (const entry of Object.values(cache)) {
      const maxSimilarity = this.calculateSimilarities(normalizedQuery, entry.variants);

      if (maxSimilarity > 0.33) { // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
        results.push({
          key: entry.project.key,
          name: entry.project.name,
          score: maxSimilarity,
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—É–±—ã–≤–∞–Ω–∏–µ) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–∞—Ä–∏–∞—Ü–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞
   */
  private exactSearch (normalizedQuery: string, cache: { [key: string]: ProjectCacheEntry }): TKeyNameScore[] {
    const matches: TKeyNameScore[] = [];

    for (const entry of Object.values(cache)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const hasExactMatch = entry.variants.some(variant =>
        variant.toLowerCase() === normalizedQuery,
      );

      if (hasExactMatch) {
        matches.push({
          key: entry.project.key,
          name: entry.project.name,
          score: 1.0, // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        });
      }
    }

    return matches;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private calculateSimilarities (query: string, variants: string[]): number {
    const similarities = variants.map(variant =>
      phraseSimilarity(query, variant.toLowerCase()),
    );
    return Math.max(...similarities);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (–¥–ª—è wildcard –ø–æ–∏—Å–∫–∞)
   */
  async getAllProjects (): Promise<TKeyNameScore[]> {
    const cache = getOptimizedProjectsCache();
    if (!cache) {
      return [];
    }

    const projects = Object.values(cache).map(entry => entry.project);
    return projects
      .sort((a, b) => a.key.localeCompare(b.key))
      .map(p => ({
        key: p.key,
        name: p.name,
        score: 1.0,
      }));
  }
}
