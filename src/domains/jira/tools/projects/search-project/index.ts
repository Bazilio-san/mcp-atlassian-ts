// –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ JIRA
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º

import { appConfig } from '../../../../../bootstrap/init-config.js';
import { createOpenAIClient, getEmbeddings, EMBEDDING_MODELS } from './openai-client.js';
import { ProjectVectorSearch } from './vector-search.js';
import { InMemoryVectorStore } from './in-memory-store.js';
import { PROJECT_DB_PATH } from '../../../constants.js';
import { TKeyName } from '../../../../../types';

// Singleton –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
let projectSearch: ProjectVectorSearch | null = null;
let openaiClient: any = null;
let lastUpdateTime = 0;
const UPDATE_INTERVAL_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function initializeVectorSearch (): Promise<ProjectVectorSearch | null> {
  // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  if (projectSearch !== null) {
    return projectSearch;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI
  if (!appConfig.openai?.apiKey) {
    console.warn('\nüö´ OpenAI API key not configured');
    console.warn('   Vector search is DISABLED. Using exact match search only.');
    console.warn('   To enable vector search, set OPENAI_API_KEY in .env or config.yaml');
    console.warn('   Project search will work with exact matching, no semantic/fuzzy search.\n');
    return null;
  }

  console.log('\nüîß Initializing vector search...');
  console.log('   Checking OpenAI connectivity...');

  try {
    // –°–æ–∑–¥–∞–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
    openaiClient = createOpenAIClient(
      appConfig.openai.apiKey,
      appConfig.openai.baseURL,
    );

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    console.log('   Testing OpenAI API connection...');
    const testModel = appConfig.openai?.model || EMBEDDING_MODELS.DEFAULT.model;
    const testDimensions = appConfig.openai?.dimensions || EMBEDDING_MODELS.DEFAULT.dimensions;

    try {
      const testResult = await getEmbeddings(openaiClient, ['test'], testModel, testDimensions);
      if (!testResult.embeddings || testResult.embeddings.length === 0) {
        throw new Error('Empty response from OpenAI API');
      }
      console.log('   ‚úÖ  OpenAI API is accessible');
    } catch (testError: any) {
      console.error(`   ‚ùå  OpenAI API test failed: ${testError?.message || testError}`);
      throw testError;
    }

    // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    console.log('   Initializing vector database...');
    const vectorDB = new InMemoryVectorStore(PROJECT_DB_PATH);

    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    const getEmbeddingsFn = async (texts: string[]) => {
      const model = appConfig.openai?.model || EMBEDDING_MODELS.DEFAULT.model;
      const dimensions = appConfig.openai?.dimensions || EMBEDDING_MODELS.DEFAULT.dimensions;

      const result = await getEmbeddings(openaiClient, texts, model, dimensions);
      return result.embeddings;
    };

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    projectSearch = new ProjectVectorSearch(vectorDB, getEmbeddingsFn);

    console.log('\n‚úÖ  Vector search initialized successfully');
    console.log(`   Model: ${appConfig.openai?.model || EMBEDDING_MODELS.DEFAULT.model}`);
    console.log(`   Dimensions: ${appConfig.openai?.dimensions || EMBEDDING_MODELS.DEFAULT.dimensions}`);
    console.log(`   Vector DB path: ${PROJECT_DB_PATH}`);
    console.log('   Semantic search: ENABLED\n');
    return projectSearch;
  } catch (error: any) {
    console.error('\n‚ùå  Failed to initialize vector search');
    if (error?.response?.status === 401) {
      console.error('   Invalid OpenAI API key. Please check your credentials.');
      console.error('   Make sure OPENAI_API_KEY is set correctly in .env or config.yaml');
    } else if (error?.response?.status === 429) {
      console.error('   OpenAI API rate limit exceeded. Please try again later.');
    } else if (error?.response?.status === 503 || error?.response?.status === 502) {
      console.error('   OpenAI API is temporarily unavailable. Please try again later.');
    } else if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {
      console.error('   Cannot connect to OpenAI API. Please check your network connection.');
    } else if (error?.code === 'ETIMEDOUT') {
      console.error('   OpenAI API request timed out. Please check your network connection.');
    } else {
      console.error('   Error:', error?.message || error);
    }
    console.warn('   Falling back to exact match search only.');
    console.warn('   Project search will work but without semantic/fuzzy capabilities.\n');
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è fallback –ø–æ–∏—Å–∫–∞ (–∫–æ–≥–¥–∞ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
 */
export async function updateProjectsCacheForFallback (
  projects: TKeyName[],
): Promise<void> {
  if (!projectSearch) {
    console.warn('‚ö†Ô∏è  Vector search not available. Creating fallback cache...');

    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    // –ë–µ–∑ OpenAI, —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const { InMemoryVectorStore } = await import('./in-memory-store.js');
    const vectorDB = new InMemoryVectorStore(PROJECT_DB_PATH);

    // –°–æ–∑–¥–∞–µ–º dummy —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è)
    const dummyEmbeddingsFn = async () => [null];

    const { ProjectVectorSearch } = await import('./vector-search.js');
    projectSearch = new ProjectVectorSearch(vectorDB, dummyEmbeddingsFn);

    console.log('üì¶ Created fallback project cache instance');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  if (projectSearch) {
    await (projectSearch as any).updateCacheOnlyForFallback(projects);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å throttling
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
 */
export async function updateProjectsIndex (
  projects: TKeyName[],
  forceUpdate = false,
): Promise<void> {
  if (!projectSearch) {
    console.debug('Vector search not available, using fallback cache update');
    await updateProjectsCacheForFallback(projects);
    return;
  }

  const now = Date.now();
  const timeSinceLastUpdate = now - lastUpdateTime;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
  if (!forceUpdate && timeSinceLastUpdate < UPDATE_INTERVAL_MS) {
    const remainingTime = Math.ceil((UPDATE_INTERVAL_MS - timeSinceLastUpdate) / 1000);
    console.debug(`Skipping vector index update (next update in ${remainingTime}s)`);
    return;
  }

  try {
    console.log('üîÑ  Starting vector index update...');
    console.log(`   Processing ${projects.length} projects from JIRA`);

    const updateStartTime = Date.now();
    await projectSearch.updateProjectsCache(projects);
    const updateDuration = Math.round((Date.now() - updateStartTime) / 1000);

    lastUpdateTime = now;

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const nextUpdateTime = new Date(lastUpdateTime + UPDATE_INTERVAL_MS);
    const nextUpdateMinutes = Math.round(UPDATE_INTERVAL_MS / 60000);

    console.log(`üéâ  Vector index update completed in ${updateDuration}s`);
    console.log(`   ‚è∞  Next automatic update: in ${nextUpdateMinutes} minutes (${nextUpdateTime.toLocaleTimeString()})`);
    console.log('   üîç  Project search is ready with semantic capabilities!\n');
  } catch (error: any) {
    console.error('‚ùå  Failed to update projects index');
    if (error?.response?.status === 401) {
      console.error('   OpenAI API authentication failed. Check your API key.');
    } else if (error?.response?.status === 429) {
      console.error('   OpenAI API rate limit exceeded. Will retry later.');
    } else if (error?.code === 'ENOTFOUND' || error?.code === 'ECONNREFUSED') {
      console.error('   Network connection to OpenAI failed.');
    } else {
      console.error(`   Error: ${error?.message || error}`);
    }
    console.warn('   Will retry on next search request or manual update.\n');
  }
}

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function searchProjects (
  query: string,
  limit = 5,
): Promise<TKeyName[]> {
  if (!projectSearch) {
    console.debug('Vector search not available');
    return [];
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ wildcard –ø–æ–∏—Å–∫–∞
  if (query === '*') {
    return projectSearch.getAllProjects();
  }

  try {
    return await projectSearch.searchProjects(query, limit);
  } catch (error) {
    console.error('Vector search failed:', error);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export function isVectorSearchAvailable (): boolean {
  return projectSearch !== null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
 */
export function shouldUpdateIndex (): boolean {
  if (!projectSearch) return false;
  const now = Date.now();
  return (now - lastUpdateTime) >= UPDATE_INTERVAL_MS;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 */
export function getTimeToNextUpdate (): number {
  const now = Date.now();
  const timeSinceLastUpdate = now - lastUpdateTime;
  if (timeSinceLastUpdate >= UPDATE_INTERVAL_MS) {
    return 0;
  }
  return Math.ceil((UPDATE_INTERVAL_MS - timeSinceLastUpdate) / 1000);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
 */
export async function clearVectorIndex (): Promise<void> {
  if (!projectSearch) {
    return;
  }

  try {
    await projectSearch.clear();
    console.debug('Vector index cleared');
  } catch (error) {
    console.error('Failed to clear vector index:', error);
  }
}

/**
 * –°–±—Ä–æ—Å —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
 */
export function resetVectorSearchSingleton (): void {
  projectSearch = null;
  openaiClient = null;
  lastUpdateTime = 0;
}
