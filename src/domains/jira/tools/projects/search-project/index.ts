// –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ JIRA
// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º

import { ProjectTextSearch } from './text-search.js';
import { TKeyName } from '../../../../../types';
import type { TKeyNameScore } from './types.js';

// Singleton –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
let projectSearch: ProjectTextSearch | null = null;
let lastUpdateTime = 0;
const UPDATE_INTERVAL_MS = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function initializeVectorSearch (): Promise<ProjectTextSearch | null> {
  // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  if (projectSearch !== null) {
    return projectSearch;
  }

  console.log('\nüîß Initializing text search...');
  console.log('   String similarity-based search (no external dependencies)');

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    projectSearch = new ProjectTextSearch();

    console.log('\n‚úÖ  Text search initialized successfully');
    console.log('   Similarity metric: phrase similarity with typo tolerance');
    console.log('   Search variations: original, lowercase, transliterated');
    console.log('   In-memory storage only');
    console.log('   Semantic search: ENABLED via string similarity\n');
    return projectSearch;
  } catch (error: any) {
    console.error('\n‚ùå  Failed to initialize text search');
    console.error('   Error:', error?.message || error);
    console.warn('   Falling back to exact match search only.');
    console.warn('   Project search will work but without fuzzy matching capabilities.\n');
    return null;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
export async function updateProjectsCacheForFallback (
  projects: TKeyName[],
): Promise<void> {
  if (!projectSearch) {
    projectSearch = new ProjectTextSearch();
    console.log('üì¶ Created text search instance for fallback');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
  if (projectSearch) {
    await projectSearch.updateProjectsCache(projects);
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å throttling
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
 */
export async function updateProjectsIndex (
  projects: TKeyName[],
  forceUpdate = false,
): Promise<void> {
  if (!projectSearch) {
    console.debug('Text search not available, creating fallback cache');
    await updateProjectsCacheForFallback(projects);
    return;
  }

  const now = Date.now();
  const timeSinceLastUpdate = now - lastUpdateTime;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
  if (!forceUpdate && timeSinceLastUpdate < UPDATE_INTERVAL_MS) {
    const remainingTime = Math.ceil((UPDATE_INTERVAL_MS - timeSinceLastUpdate) / 1000);
    console.debug(`Skipping text index update (next update in ${remainingTime}s)`);
    return;
  }

  try {
    console.log('üîÑ  Starting text index update...');
    console.log(`   Processing ${projects.length} projects from JIRA`);

    const updateStartTime = Date.now();
    await projectSearch.updateProjectsCache(projects);
    const updateDuration = Math.round((Date.now() - updateStartTime) / 1000);

    lastUpdateTime = now;

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const nextUpdateTime = new Date(lastUpdateTime + UPDATE_INTERVAL_MS);
    const nextUpdateMinutes = Math.round(UPDATE_INTERVAL_MS / 60000);

    console.log(`üéâ  Text index update completed in ${updateDuration}s`);
    console.log(`   ‚è∞  Next automatic update: in ${nextUpdateMinutes} minutes (${nextUpdateTime.toLocaleTimeString()})`);
    console.log('   üîç  Project search is ready with fuzzy matching capabilities!\n');
  } catch (error: any) {
    console.error('‚ùå  Failed to update projects index');
    console.error(`   Error: ${error?.message || error}`);
    console.warn('   Will retry on next search request or manual update.\n');
  }
}

/**
 * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export async function searchProjects (
  query: string,
  limit = 5,
): Promise<TKeyNameScore[]> {
  if (!projectSearch) {
    console.debug('Text search not available');
    return [];
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ wildcard –ø–æ–∏—Å–∫–∞
  if (query === '*') {
    const allProjects = await projectSearch.getAllProjects();
    return allProjects.map(p => ({ key: p.key, name: p.name }));
  }

  try {
    const results = await projectSearch.searchProjects(query, limit);
    return results.map(r => ({ key: r.key, name: r.name, score: r.score || 0.0 }));
  } catch (error) {
    console.error('Text search failed:', error);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
export function isVectorSearchAvailable (): boolean {
  return projectSearch !== null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
 */
export function shouldUpdateIndex (): boolean {
  if (!projectSearch) {
    return false;
  }
  const now = Date.now();
  return (now - lastUpdateTime) >= UPDATE_INTERVAL_MS;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
 */
export function getTimeToNextUpdate (): number {
  const now = Date.now();
  const timeSinceLastUpdate = now - lastUpdateTime;
  if (timeSinceLastUpdate >= UPDATE_INTERVAL_MS) {
    return 0;
  }
  return Math.ceil((UPDATE_INTERVAL_MS - timeSinceLastUpdate) / 1000);
}
